@model DFC.App.FindACourse.ViewModels.BodyViewModel

@{
    var previousPage = Model.RequestPage - 1;
    var nextPage = Model.RequestPage + 1;

    var town = Model.SideBar.TownOrPostcode;
    var distance = Model.SideBar.DistanceValue;
    var courseType = Html.Raw(Json.Serialize(Model.SideBar.CourseType.SelectedIds));
    var courseHours = Html.Raw(Json.Serialize(Model.SideBar.CourseHours.SelectedIds));
    var courseStudyTime = Html.Raw(Json.Serialize(Model.SideBar.CourseStudyTime.SelectedIds));
    var startDate = Model.SideBar.StartDateValue;
    var searchTerm = Model.SideBar.CurrentSearchTerm;
    var filterA = Model.SideBar.FiltersApplied;
    var orderByValue = Model.SideBar.SelectedOrderByValue;
    var coordinates = Model.SideBar.Coordinates;
    var campaignCode = Model.CourseSearchFilters.CampaignCode;
    var qualificationLevels = Html.Raw(Json.Serialize(Model.SideBar.QualificationLevels.SelectedIds));


    var parameters = $"{nameof(searchTerm)}={searchTerm}&" +
                     $"{nameof(town)}={town}&" +
                     $"{nameof(courseType)}={courseType}&" +
                     $"{nameof(courseHours)}={courseHours}&" +
                     $"{nameof(courseStudyTime)}={courseStudyTime}&" +
                     $"{nameof(startDate)}={startDate}&" +
                     $"{nameof(distance)}={distance}&" +
                     $"{nameof(filterA)}={filterA}&" +
                     $"{nameof(orderByValue)}={orderByValue}&" +
                     $"{nameof(coordinates)}={coordinates}&" +
                     $"{nameof(campaignCode)}={campaignCode}&" +
                     $"{nameof(qualificationLevels)}={qualificationLevels}";
    var nextLinkParams = $"{parameters}&page={nextPage}";
    var previousLinkParams = $"{parameters}&page={previousPage}";
    var id = Model.IsResultBody ? "fac-result-list-Result" : "fac-result-list";
}

<div id="@id">
    @if (Model.Results != null)
    {
        if (Model.Results.Courses.Count() > 0)
        {
            @foreach (var result in Model.Results.Courses)
            {
                result.HasCampaignCode = Model.FreeCourseSearch;
                switch (result.AttendanceMode)
                {
                    case "Classroom based":
                        <partial name="_results_classroom" model="result" />
                        <hr class="govuk-section-break govuk-section-break--visible">
                        break;
                    case "Work based":
                        <partial name="_results_workbased" model="result" />
                        <hr class="govuk-section-break govuk-section-break--visible">
                        break;
                    case "Online":
                        <partial name="_results_online" model="result" />
                        <hr class="govuk-section-break govuk-section-break--visible">
                        break;
                    default:
                        break;
                }
            }

            @if (Model.Results.ResultProperties.TotalPages > 1)
            {
                int showRecordsFrom;
                int showRecordsTo;
                int showMaxPages = 3;
                int startPage;
                int endPage;
                int currentPage;

                if (Model.RequestPage == 1)
                {
                    showRecordsFrom = 1;
                    showRecordsTo = Model.PageSize;
                    currentPage = 1;
                }
                else
                {
                    showRecordsFrom = ((Model.Results.ResultProperties.Page - 1) * Model.PageSize) + 1;
                    showRecordsTo = Model.Results.ResultProperties.TotalPages == Model.RequestPage ? Model.Results.ResultProperties.TotalResultCount : Model.PageSize * (Model.RequestPage);
                    currentPage = Model.RequestPage - 1;
                }

                if (Model.Results.ResultProperties.TotalPages <= showMaxPages)
                {
                    startPage = 1;
                    endPage = Model.Results.ResultProperties.TotalPages;
                }
                else
                {
                    startPage = (Model.RequestPage > showMaxPages && Model.RequestPage == Model.Results.ResultProperties.TotalPages) ? currentPage - 1 : currentPage;
                    endPage = Model.RequestPage < Model.Results.ResultProperties.TotalPages ? currentPage + showMaxPages - 1 : Model.Results.ResultProperties.TotalPages;
                }

                <nav class="hods-pagination__navigation"
         role="navigation"
         aria-label="Pagination Navigation">
                    <div class="hods-pagination__navigation__summary">
                        Showing @showRecordsFrom - @showRecordsTo results
                    </div>
                    <ul class="hods-pagination__navigation__list-items">

                        @if (Model.Results.ResultProperties.Page > 1)
                        {
                            <li class="hods-pagination__navigation__item">
                                <a class="govuk-link hods-pagination__navigation__link"
                   aria-label="Next page" href="/find-a-course/page?@previousLinkParams">
                                <span aria-hidden="true" role="presentation">«</span>
                                    Previous
                                </a>
                            </li>
                        }

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="hods-pagination__navigation__item">
                                @if (i == Model.RequestPage)
                                {
                                <div aria-current="true"
                                aria-label="Current page, page @i"
                                class="govuk-link hods-pagination__navigation__link hods-pagination__navigation__link--current">
                                    @i
                                </div>
                                }
                                else
                                {
                                <a class="govuk-link hods-pagination__navigation__link"
                                aria-label="Go to page @(i == endPage ? endPage : i)" href="/find-a-course/page?@parameters&page=@i">@i</a>
                                }

                            </li>
                        }

                        @if (Model.Results.ResultProperties.Page < Model.Results.ResultProperties.TotalPages)
                        {
                            <li class="hods-pagination__navigation__item">
                                <a class="govuk-link hods-pagination__navigation__link"
                                aria-label="Next page"
                                href="/find-a-course/page?@nextLinkParams">
                                    Next
                                    <span aria-hidden="true"
                          role="presentation">
                                        »
                                    </span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        }
        else
        {
            <div id="no-results-block">
                <h3 class="govuk-body-s govuk-!-margin-bottom-1">
                    <p class="govuk-body">We didn't find any results for <span id="search-term-no-results">'@Html.Raw(Model.CurrentSearchTerm)'</span> with the active filters you've applied. Try searching again.</p>
                    <p class="govuk-body">You could:</p>
                    <ul class="list list-bullet govuk-body">
                        <li>check your spelling</li>
                        <li>change the start date</li>
                        <li>check your town or postcode</li>
                        <li>change your filters</li>
                        <li>try different search terms</li>
                    </ul>
                </h3>
            </div>
        }
    }
</div>